/*
 * RUCA: Rust calculator
 *
 * Meant to be similar to bc, and intended to
 * have less overhead than piping an expression
 * to luajit which has a more natural-feeling
 * syntax
 */

use std::ops::*;
use std::process::ExitCode;

fn main() -> ExitCode {

    let args = std::env::args();
    let max = args.len()-2;

    let expression = args
        .enumerate()
        .map(|(i,x)| {
            if i < max {
                x + " "
            } else if i > 0 {
                x
            } else {
                String::new()
            }
        })
        .collect::<Vec<String>>()
        .concat()
        .trim()
        .to_string();
    let result = parse_float(expression);

    if let Err(e) = result {
        return e;
    }
    if let Ok(num) = result {
        println!("{}", num);
    }


    ExitCode::from(0)
}

fn parse_expression<T>(expression: String) -> T
where T: Add + Mul + Sub + Div + std::str::FromStr + std::default::Default {
    expression.parse::<T>().unwrap_or(T::default())
}

fn parse_float(expression: String) -> Result<f64,ExitCode> {

    fn exitval(code: u8) -> Result<f64, ExitCode> {
        Err(ExitCode::from(code))
    }

    if let Ok(num) = expression.trim().parse::<f64>() {
        return Ok(num);
    }

    let mut expression = expression;

    let mut resolved = false;

    let mut total: f64 = 0.0;

    while !resolved {
        resolved = match scan_all(&expression) {
            Ok(num) => {
                total = num;
                true
            },
            Err(expr) => {
                expression = expr;
                false
            },
        };
        std::thread::sleep(std::time::Duration::from_millis(800));
    }

    Ok(total)

}

fn scan_all(expression: &str) -> Result<f64, String> {

    { dbg!(&expression); }

    let mut expr = String::new();

    let mut attempted1 = Ok(0.0);
    let mut attempted2 = Ok(0.0);

    let mut paren_index1: Option<usize> = None;
    let mut paren_index2: Option<usize> = None;

    let mut skip: i8 = 0;

    let mut converted1 = 0.0;
    let mut converted2 = 0.0;

    let len = expression.chars().count();
    let mut pre = 0;
    let mut post = len;

    macro_rules! operate {
        ($i:expr, $ch:expr) => {

            println!("Trying to evaluate \"{}\" and \"{}\" with '{}'", 
                &expression[0..$i],
                &expression[$i+1..len],
                $ch);

            let (start1, end1, paren_depth1) =
            find_number(&expression[..$i], false);
            {
                let pre = end1;
                
                println!("Trying to assign found value {} to converted1",
                    &expression[start1..=end1]);
                if let Ok(num1) = &expression[start1..=end1].trim().parse::<f64>() {
                    converted1 = *num1;
                    println!("Converted1 is equal to {converted1} (Ok(num1))");
                } else {
                    println!("Entering quantity1...");
                    let result = scan_all(&expression[start1..=end1]);
                    if let Ok(num) = result {
                        converted1 = num;
                    } else if let Err(exp) = result {
                        println!("Quantity1 result yielded new expression: {}",&exp);
                        attempted1 = scan_all(&exp);
                        if let Ok(num1) = &attempted1 {
                            converted1 = *num1;
                        } else if let Err(exp) = &attempted1 {
                            expr = exp.to_string() + &expression[end1+1..];
                        }
                    }
                }
            
            }
            /*
            {
                println!("Trying recursion on {:?}", &expression[..$i]);
                if let Ok(num1) = scan_all(&expression[..$i]) {
                    converted1 = num1;
                }
            } 
            */
            let (start2, end2, paren_depth2) =
            find_number(&expression[$i+1..len], true);
            {
                let offset = $i+1;
                println!("Trying to assign found value {} to converted2",
                    &expression[start2+offset..=end2+offset]);

                if let Ok(num2) = &expression[start2+offset..=end2+offset].trim().parse::<f64>() {
                    converted2 = *num2;
                    println!("Converted2 is equal to {converted2} (Ok(num2))");
                } else {
                    println!("Entering quantity2... Using slice {:?}", &expression[start2+offset..=end2+offset]);
                    let result = scan_all(&expression[start2+offset..=end2+offset]);
                    if let Ok(num) = result {
                        converted2 = num;
                    } else if let Err(exp) = result {
                        println!("Quantity2 result yielded new expression: {}",&exp);
                        attempted2 = scan_all(&exp);
                        if let Ok(num2) = &attempted2 {
                            converted2 = *num2;
                        } else if let Err(exp) = &attempted2 {
                            expr = expression[..start2].to_string() + &exp;
                        }
                    }
                }
            }
            
            
            { dbg!(&converted1); }
            { dbg!(&converted2); }

            if attempted1.is_ok() && attempted2.is_ok() {
                expr = 
                expression[..pre].to_string() + 
                (match $ch {
                    '^' => converted1.powf(converted2),
                    '*' => converted1 * converted2,
                    '/' => converted1 / converted2,
                    '+' => converted1 + converted2,
                    '-' => converted1 - converted2,
                    '%' => converted1 % converted2,
                     _ => converted1,
                }).to_string().as_str() +
                &expression[post..];
            } else {
                if let Err(e) = &attempted1 {
                    expr = 
                        e.to_string() + &expression[post..];
                }
                if let Err(e) = &attempted2 {
                    expr =
                        expression[..pre].to_string() + e.as_str();
                }
            }

            break;
        }
    }

    let mut parens_balance: i8 = 0;
    let mut last_open = 0;
    let mut first_close = 0;

    for pass in 0..4 {
        for (i, ch) in expression.chars().enumerate() {
            if skip < 0 { panic!("Mismatched parentheses"); }
            match ch {
                '(' => {
                    last_open = i;
                    parens_balance += 1;
                },
                ')' => {
                    first_close = i;
                    parens_balance -= 1;

                    let deepest_group = &expression[last_open+1..first_close];

                    println!("Deepest group is \"{deepest_group}\"");

                    if let Ok(num) = scan_all(deepest_group) {
                        if last_open == 0 { last_open = 1; }
                        let end_string = if first_close == len-1 {
                            ""
                        } else {
                            &expression[first_close+1..]
                        };

                        let partial_eval = expression[..last_open].to_string() + 
                                format!("{}", num).as_str() +
                                end_string;

                        println!("Partial eval is {partial_eval}");
                        return 
                            Err(partial_eval);
                    }
                }
                '^' if pass == 1 => {
                    if skip > 0 {
                        skip -= 1;
                    } else {
                        operate!(i,ch);
                    }
                },
                '*' | '/' | '%' if pass == 2 => {
                    if skip > 0 {
                        skip -= 1;
                    } else {
                        operate!(i,ch);
                    }
                },
                '+' | '-' if pass == 3 => {
                    if skip > 0 {
                        skip -= 1;
                    } else {
                        operate!(i,ch);
                    }
                },
                _ => {},
            }
        }
    }

    if let Ok(num) = expression.parse::<f64>() {
        return Ok(num);
    }

    Err(expr)
}

fn find_number(string: &str, forward: bool)
-> (usize, usize, isize) // Location and parentheses depth, or
                                       // failure code
{

    println!("find_number got string \"{}\"", &string);
    let mut inside_number = false;
    let mut period_found = false;

    let mut paren_depth: isize = 0;

    let len = string.to_string().chars().count();
    let (mut first, mut last) = (0, len-1);
    println!("Searching forward...");
    if forward {
        for (i, ch) in string.to_string().chars().enumerate() {
            //{ dbg!(&i, &ch, &paren_depth); }
            match ch {
                '(' => {
                    first = i+1;
                    paren_depth += 1;
                },
                ')' => { 
                    last = i-1;
                    paren_depth -= 1;
                },
                '0'..='9' | '.' => {
                    if !inside_number {
                        inside_number = true;
                        if paren_depth > 0 {
                            first = i;
                        }
                    }
                    
                },
               _ => {
                    if paren_depth > 0 {
                        if inside_number {
                            last = i;
                        }
                    } else if inside_number {
                        inside_number = false;
                        period_found = false;
                    }
                }
            }
            if i == len - 1 && inside_number {
                if ch != ')' {
                    last = i;
                } else {
                    last = i - 1;
                }
            }
        }
    } else {
        println!("Searching backward...");
        for (i, ch) in string.to_string().chars().rev().enumerate() {
            let i = len - i - 1;


            //{ dbg!(&i, &ch, &paren_depth); }
            match ch {
                ')' => {
                    last = i-1;
                    paren_depth += 1;
                },
                '(' => { 
                    first = i+1;
                    paren_depth -= 1;
                },
                '0'..='9' | '.' => {
                    if paren_depth > 0 {
                        inside_number = true;
                        if paren_depth > 0 {
                            last = i;
                        }
                    }
                     
                },
                _ => {
                    if paren_depth > 0 {
                        if inside_number {
                            first = i;
                            return (first, last, paren_depth);
                        }
                    } else if inside_number {
                        inside_number = false;
                        period_found = false;
                    }

                },
            }

            if i == 0 && inside_number {
                return (0,last,paren_depth);
            }

        }
    }

    (first, last, paren_depth)
}
